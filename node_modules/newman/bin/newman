#!/usr/bin/env node

/**
 * @Authors Abhijit Kane & Arjun Variar & Prakhar Srivastav.
 * @Purpose Integerates POSTMAN Collection runner/tests with CI systems.
 *
 * Main file which parses the command line arguments and runs Newman, Supports JSON5.
 */

var _ = require('lodash'),
    color = require('cli-color'),
    program = require('commander'),
    path = require('path'),
    request = require('unirest'),
    fs = require('fs'),
    Helpers = require('../src/utilities/Helpers'),
    Importer = require('../src/utilities/Importer'),
    Errors = require('../src/utilities/ErrorHandler'),
    JSON5 = require('json5'),
    Globals = require('../src/utilities/Globals'),
    Newman = require('../src/Newman');


function parseArguments() {
    program
        .version(Globals.newmanVersion)
        .usage('[options]')
        .option('-c, --collection [file]', 'Specify a Postman collection as a JSON [file]', null)
        .option('-u, --url [url]', 'Specify a Postman collection as a [url]', null)
        .option('-f, --folder [folder-name]', 'Run a single folder from a collection. To be used with -c or -u', null)
        .option('-e, --environment [file]', 'Specify a Postman environment as a JSON [file]', null)
        .option('--environment-url [url]', 'Specify a Postman environment as a URL', null)
        .option('-E, --exportEnvironment [file]', 'Specify an output file to dump the Postman environment before exiting [file]', null)
        .option('-d, --data [file]', 'Specify a data file to use either json or csv', null)
        .option('-g, --global [file]', 'Specify a Postman globals file [file]', null)
        .option('-G, --exportGlobals [file]', 'Specify an output file to dump Globals before exiting [file]', null)
        .option('-y, --delay [number]', "Specify a delay (in ms) between requests", null)
        .option('-r, --requestTimeout [number]', "Specify a request timeout (in ms) for requests (Defaults to 15000 if not set)", null)
        .option('-R, --avoidRedirects', "Prevents Newman from automatically following redirects", null)
        .option('-s, --stopOnError', "Stops the runner with code=1 when a test case fails", null)
        .option('-j, --noSummary', "Doesn't show the summary for each iteration", null)
        .option('-n, --number [number]', 'Define the number of iterations to run', null)
        .option('-C, --noColor', 'Disable colored output', null)
        .option('-S, --noTestSymbols', 'Disable symbols in test output and use PASS|FAIL instead', null)
        .option('-k, --insecure', 'Disable strict ssl', null)
        .option('-l, --tls', 'Use TLSv1', null)
        .option('-N, --encoding [encoding-type]', 'Specify an encoding for the response. Supported values are ascii,utf8,utf16le,ucs2,base64,binary,hex', null)
        .option('-x, --exitCode', 'Continue running tests even after a failure, but exit with code=1. Incompatible with --stopOnError', null)
        .option('-o, --outputFile [file]', 'Path to file where output should be written [file]', null)
        .option('-O, --outputFileVerbose [file]', 'Path to file where full request and responses should be logged [file]', null)
        .option('-t, --testReportFile [file]', 'Path to file where results should be written as JUnit XML [file]', null)
        .option('-i, --import [file]', 'Import a Postman backup file, and save collections, environments, and globals [file] (Incompatible with any option except pretty)', null)
        .option('-p, --pretty', 'Enable pretty-print while saving imported collections, environments, and globals', null)
        .option('-H, --html [file]', 'Export a HTML report to a specified file [file]', null)
        .option('-W, --whiteScreen', 'Black text for white screen', null)
        .option('-L, --recurseLimit [limit]', 'Do not run recursive resolution more than [limit] times. Default = 10. Using 0 will prevent any variable resolution', null);

    program.on('--help', function () {
        console.log('  Newman is a command-line collection runner for Postman. You must specify a collection file or a collection URL to run newman');
        console.log('');
        console.log('  A collection file or URL is mandatory');
        console.log('  Examples:');
        console.log('');
        console.log('    newman -c POSTMAN_COLLECTION');
        console.log('    newman -u POSTMAN_COLLECTION -e POSTMAN_ENVIRONMENT');
        console.log('    newman -c POSTMAN_COLLECTION -f SAMPLE_FOLDER');
        console.log('');
        console.log('  For more documentation, issues and examples head over to https://github.com/postmanlabs/newman');
        console.log('');
    });

    program.parse(process.argv);


    if (program.import) {
        Importer.importFile(program.import, program.pretty);
        return;
    }

    if (program.collection) {
        Helpers.validateCollectionFile(program.collection);
    } else if (program.url) {
        Helpers.validateCollectionUrl(program.url);
    } else {
        program.help();
        console.log("Please provide a valid collection file / url to run");
        //Errors.terminateWithError("Please provide a valid collection file / url to run");
    }

    if (!program.folder) {
        if (process.argv.indexOf("-f") != -1 || process.argv.indexOf("--folder") != -1) {
            Errors.terminateWithError("The --folder / -f switch requires a folder name.");
        }
    }

    if (program.encoding) {
        Helpers.validateEncoding(program.encoding);
    }

    if (program.data) {
        Helpers.validateDataFile(program.data);
    }

    if (program.global) {
        Helpers.validateGlobalFile(program.global);
    }

    if (program.environment) {
        Helpers.validateEnvironmentFile(program.environment);
    }
}

function main() {
    parseArguments();

    newmanOptions = {};

    if (program.import) {
        //the importer function will print all relevant messages
        return;
    }

    if (program.environment) {
        // in case of environment variable set the envJson property
        // on the options object
        try {
            newmanOptions.envJson = JSON5.parse(fs.readFileSync(program.environment, 'utf8'));
        }
        catch (err) {
            Errors.terminateWithError("The environment file " + program.environment + " could not be parsed.");
        }
    }

    newmanOptions.responseHandler = 'TestResponseHandler';

    if (program.number) {
        newmanOptions.iterationCount = program.number;
    }

    newmanOptions.responseEncoding = program.encoding;

    newmanOptions.avoidRedirects = program.avoidRedirects;

    newmanOptions.summary = !program.noSummary;

    newmanOptions.html = program.html;

    if (program.outputFile) {
        newmanOptions.outputFile = program.outputFile;
    }

    if (program.recurseLimit) {
        newmanOptions.recurseLimit = parseInt(program.recurseLimit);
    }

    if (program.outputFileVerbose) {
        newmanOptions.outputFileVerbose = program.outputFileVerbose;
    }

    if (program.testReportFile) {
        newmanOptions.testReportFile = program.testReportFile;
    }

    if (program.data) {
        newmanOptions.dataFile = program.data;
    }

    if (program.delay) {
        if (isNaN(program.delay) || parseFloat(program.delay) % 1 !== 0) {
            Errors.terminateWithError("The delay must be an integer");
        }
        newmanOptions.delay = parseInt(program.delay);
    }

    if (program.requestTimeout) {
        if (isNaN(program.requestTimeout) || parseFloat(program.requestTimeout) % 1 !== 0) {
            Errors.terminateWithError("The request Timeout must be an integer");
        }
        newmanOptions.requestTimeout = parseInt(program.requestTimeout);
    }

    if (program.global) {
        try {
            newmanOptions.globalJSON = JSON5.parse(fs.readFileSync(program.global, 'utf8'));
        }
        catch (err) {
            Errors.terminateWithError("The global file " + program.global + " could not be parsed.");
        }
    }

    if (program.exportGlobals) {
        newmanOptions.exportGlobalsFile = program.exportGlobals;
    }

    if (program.exportEnvironment) {
        newmanOptions.exportEnvironmentFile = program.exportEnvironment;
    }

    if (program.tls) {
        newmanOptions.secureProtocol = 'TLSv1_method';
    }

    if (program.folder) {
        newmanOptions.folderName = program.folder;
    }

    newmanOptions.stopOnError = !!program.stopOnError;
    newmanOptions.noColor = !!program.noColor;
    newmanOptions.noTestSymbols = !!program.noTestSymbols;
    newmanOptions.strictSSL = !program.insecure;
    newmanOptions.asLibrary = false;
    newmanOptions.exitCode = !!program.exitCode;
    newmanOptions.whiteScreen = !!program.whiteScreen;

    var collectionJson;
    if (program.collection) {
        try {
            // read collection from the filesystem
            collectionJson = JSON5.parse(fs.readFileSync(program.collection, 'utf8'));
        }
        catch (err) {
            Errors.terminateWithError("The collection file " + program.collection + " could not be parsed.");
        }

        if (program.environmentUrl) {
            request.get(program.environmentUrl).type('json').end(function (data) {
                if (data.error) {
                    Errors.terminateWithError('Unable to fetch a valid environment. Error: ' + data.code);
                }
                newmanOptions.envJson = data.body;
                Newman.execute(collectionJson, newmanOptions, function (exitCode) {
                    process.exit(exitCode);
                });
            });
        }
        else {
            Newman.execute(collectionJson, newmanOptions, function (exitCode) {
                process.exit(exitCode);
            });
        }
    } else {
        // get collection from url
        request.get(program.url).type('json').end(function (collectionData) {
            if (collectionData.error) {
                Errors.terminateWithError('Unable to fetch a valid collection. Error: ' + collectionData.code);
            }
            collectionJson = collectionData.body;
            if (program.environmentUrl) {
                request.get(program.environmentUrl).type('json').end(function (environmentData) {
                    if (environmentData.error) {
                        Errors.terminateWithError('Unable to fetch a valid environment. Error: ' + environmentData.code);
                    }
                    newmanOptions.envJson = environmentData.body;
                    Newman.execute(collectionJson, newmanOptions, function (exitCode) {
                        process.exit(exitCode);
                    });
                });
            }
            else {
                Newman.execute(collectionJson, newmanOptions, function (exitCode) {
                    process.exit(exitCode);
                });
            }
        });
    }
}

main();
